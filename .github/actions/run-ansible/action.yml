name: 'Run Ansible Playbook for SAP'
description: 'Executes Ansible playbooks for SAP automation'

inputs:
  displayName:
    description: 'Display name for the step'
    required: true
  ansibleFilePath:
    description: 'Path to the Ansible playbook file'
    required: true
  ansibleConfigPath:
    description: 'Path to the Ansible configuration file'
    required: true
  sidHosts:
    description: 'Path to hosts inventory file'
    required: true
  secretName:
    description: 'SSH key secret name in Key Vault'
    required: true
  vaultName:
    description: 'Azure Key Vault name'
    required: true
  parametersFolder:
    description: 'Path to parameters folder'
    required: true
  extraParams:
    description: 'Extra parameters to pass to Ansible'
    required: false
    default: ''
  sapParams:
    description: 'SAP parameters file path'
    required: true
  passwordSecretName:
    description: 'Password secret name in Key Vault'
    required: true
  userNameSecretName:
    description: 'Username secret name in Key Vault'
    required: true
  azureClientId:
    description: 'Azure Client ID'
    required: true
  azureClientSecret:
    description: 'Azure Client Secret'
    required: true
  azureTenantId:
    description: 'Azure Tenant ID'
    required: true
  azureSubscriptionId:
    description: 'Azure Subscription ID'
    required: true
  useMSI:
    description: 'Use Managed Service Identity'
    required: false
    default: 'false'
  controlPlaneSubscriptionId:
    description: 'Control plane subscription ID'
    required: true
    default: ''

runs:
  using: "composite"
  steps:
    - name: Run Ansible Playbook
      shell: bash
      run: |
        #!/bin/bash
        # Exit immediately if a command exits with a non-zero status.
        # Treat unset variables as an error when substituting.
        if [ "$DEBUG" = True ]; then
          cyan="\e[1;36m"
          reset_formatting="\e[0m"
          echo -e "$cyanEnabling debug mode$reset_formatting"
          set -x
          set -o errexit
        fi

        #Stage could be executed on a different machine by default, need to login again for ansible
        control_plane_subscription="${{ inputs.controlPlaneSubscriptionId }}"
        export control_plane_subscription

        deployer_file=/etc/profile.d/deploy_server.sh

        if [ ${{ inputs.useMSI }} != "true" ]; then
          echo "::group::Running on a deployer..."
          if [ -f "${deployer_file}" ]; then
            source /etc/profile.d/deploy_server.sh
          fi
          noAccess=$( az account show --query name 2>/dev/null | grep -i "N/A(tenant level account)" || echo "")

          if [ -z "$noAccess" ]; then
            az account set --subscription $AZURE_SUBSCRIPTION_ID --output none
          fi
        else
          echo "::group::Running on an Azure agent..."

          az login --service-principal -u $AZURE_CLIENT_ID -p=$AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID --output none
          az account set --subscription $AZURE_SUBSCRIPTION_ID --output none
        fi

        set -eu

        if [ ! -f $PARAMETERS_FOLDER/sshkey ]; then
          echo "::group::Retrieving sshkey..."
          az keyvault secret show --name "$SSH_KEY_NAME" --vault-name "$VAULT_NAME" --query value -o tsv > "$PARAMETERS_FOLDER/sshkey"
          chmod 600 "$PARAMETERS_FOLDER"/sshkey
          echo "::endgroup::"
        fi

        password_secret=$(az keyvault secret show --name "$PASSWORD_KEY_NAME" --vault-name "$VAULT_NAME" --query value -o tsv)

        echo "Extra parameters passed: $EXTRA_PARAMS"

        base=$(basename "$ANSIBLE_FILE_PATH")

        filename_without_prefix=$(echo "$base" | awk -F'.' '{print $1}')
        filename=./config/Ansible/"${filename_without_prefix}"_pre.yml
        return_code=0

        echo "Extra parameters passed: $EXTRA_PARAMS"
        echo "Check for file: ${filename}"

        command="ansible --version"
        eval $command

        EXTRA_PARAM_FILE=""

        if [ -f $PARAMETERS_FOLDER/extra-params.yaml ]; then
          echo "Extra parameter file passed: $PARAMETERS_FOLDER/extra-params.yaml"
          EXTRA_PARAM_FILE="-e @$PARAMETERS_FOLDER/extra-params.yaml"
        fi

        ############################################################################################
        #                                                                                          #
        # Run Pre tasks if Ansible playbook with the correct naming exists                         #
        #                                                                                          #
        ############################################################################################

        if [ -f  "${filename}" ]; then
          echo "::group::- preconfiguration"

          redacted_command="ansible-playbook -i $INVENTORY -e @$SAP_PARAMS $EXTRA_PARAMS $EXTRA_PARAM_FILE ${filename} -e 'kv_name=$VAULT_NAME'"
          echo "::debug::Executing [$redacted_command]..."

          command="ansible-playbook -i $INVENTORY --private-key $PARAMETERS_FOLDER/sshkey  -e 'kv_name=$VAULT_NAME' \
                -e @$SAP_PARAMS -e 'download_directory=/tmp' -e '_workspace_directory=$PARAMETERS_FOLDER' $EXTRA_PARAMS  \
                -e ansible_ssh_pass='${password_secret}' $EXTRA_PARAM_FILE ${filename}"

          eval $command
          return_code=$?
          echo "::debug::Ansible playbook ${filename} execution completed with exit code [$return_code]"
          echo "::endgroup::"

        fi

        command="ansible-playbook -i $INVENTORY --private-key $PARAMETERS_FOLDER/sshkey   -e 'kv_name=$VAULT_NAME'   \
          -e @$SAP_PARAMS -e 'download_directory=/tmp' -e '_workspace_directory=$PARAMETERS_FOLDER' \
          -e ansible_ssh_pass='${password_secret}' $EXTRA_PARAMS $EXTRA_PARAM_FILE                                  \
           $ANSIBLE_FILE_PATH"


        redacted_command="ansible-playbook -i $INVENTORY -e @$SAP_PARAMS $EXTRA_PARAMS $EXTRA_PARAM_FILE $ANSIBLE_FILE_PATH  -e 'kv_name=$VAULT_NAME'"

        echo "::debug::Executing [$redacted_command]..."
        echo "::group::- output"
        eval $command
        return_code=$?
        echo "::debug::Ansible playbook execution completed with exit code [$return_code]"
        echo "::endgroup::"


        filename=./config/Ansible/"${filename_without_prefix}"_post.yml
        echo "Check for file: ${filename}"


        ############################################################################################
        #                                                                                          #
        # Run Post tasks if Ansible playbook with the correct naming exists                        #
        #                                                                                          #
        ############################################################################################

        if [ -f  ${filename} ]; then

          echo "::group::- postconfiguration"
          redacted_command="ansible-playbook -i $INVENTORY -e @$SAP_PARAMS $EXTRA_PARAMS $EXTRA_PARAM_FILE ${filename}  -e 'kv_name=$VAULT_NAME'"
          echo "::debug::Executing [$redacted_command]..."

          command="ansible-playbook -i $INVENTORY --private-key $PARAMETERS_FOLDER/sshkey   -e 'kv_name=$VAULT_NAME'      \
                -e @$SAP_PARAMS -e 'download_directory=/tmp' -e '_workspace_directory=$PARAMETERS_FOLDER' \
                -e ansible_ssh_pass='${password_secret}' ${filename}  $EXTRA_PARAMS $EXTRA_PARAM_FILE"

          eval $command
          return_code=$?
          echo "::debug::Ansible playbook ${filename} execution completed with exit code [$return_code]"
          echo "::endgroup::"

        fi

        exit $return_code
      env:
        AZURE_CLIENT_ID: ${{ inputs.azureClientId }}
        AZURE_CLIENT_SECRET: ${{ inputs.azureClientSecret }}
        AZURE_TENANT_ID: ${{ inputs.azureTenantId }}
        AZURE_SUBSCRIPTION_ID: ${{ inputs.azureSubscriptionId }}
        USE_MSI: ${{ inputs.useMSI }}
        ANSIBLE_COLLECTIONS_PATH: ~/.ansible/collections:/opt/ansible/collections
        ANSIBLE_PYTHON_INTERPRETER: auto_silent
        ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
        ANSIBLE_HOST_KEY_CHECKING: false
        ANSIBLE_FILE_PATH: ${{ inputs.ansibleFilePath }}
        ANSIBLE_CONFIG: ${{ inputs.ansibleConfigPath }}
        PARAMETERS_FOLDER: ${{ inputs.parametersFolder }}
        EXTRA_PARAMS: ${{ inputs.extraParams }}
        SAP_PARAMS: ${{ inputs.sapParams }}
        INVENTORY: ${{ inputs.parametersFolder }}/${{ inputs.sidHosts }}
        SSH_KEY_NAME: ${{ inputs.secretName }}
        VAULT_NAME: ${{ inputs.vaultName }}
        PASSWORD_KEY_NAME: ${{ inputs.passwordSecretName }}
        USERNAME_KEY_NAME: ${{ inputs.userNameSecretName }}
        DEBUG: "false"
